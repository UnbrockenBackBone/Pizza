// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Pizza.Domain;

namespace Pizza.Migrations
{
    [DbContext(typeof(PizzaDbContext))]
    [Migration("20210514190349__initial")]
    partial class _initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.3.21201.2")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "44546e06-8719-4ad8-b88a-f271ae9d6eab",
                            ConcurrencyStamp = "59375ace-1ab7-4a23-9a5f-74b62918b90a",
                            Name = "admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "3b62472e-4f66-49fa-a20f-e7685b9565d8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63c50fcf-9e6b-405a-a428-d3126061407b",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@admin.com",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHTaiThIZRvl/YSnqvmCWggZPOmFanpc/YofrC8NkAZ0f6gWxHHDtFaM5Mfa2WpCHg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "3b62472e-4f66-49fa-a20f-e7685b9565d8",
                            RoleId = "44546e06-8719-4ad8-b88a-f271ae9d6eab"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Pizza.Domain.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Subtitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f2b954cd-b523-4deb-9cb2-a0aed73a788f"),
                            Category = "Pizza",
                            Name = "Deluxe",
                            Price = 10,
                            Subtitle = "original & favorite specialty pizza topped",
                            TitleImagePath = "~/images/pizza_img2.jpg"
                        },
                        new
                        {
                            Id = new Guid("0f510f29-4848-4968-99e6-1f01ea512756"),
                            Category = "Pizza",
                            Name = "Veggie",
                            Price = 10,
                            Subtitle = "Veggie lovers rejoice! Pizza topped with mushrooms",
                            TitleImagePath = "~/images/pizza_img2.jpg"
                        },
                        new
                        {
                            Id = new Guid("2474ee16-9d15-42f7-8b8f-5aa842e336d4"),
                            Category = "Pizza",
                            Name = "All Meat",
                            Price = 10,
                            Subtitle = "Our famous meat pizza is topped",
                            TitleImagePath = "~/images/pizza_img3.jpg"
                        },
                        new
                        {
                            Id = new Guid("655b8155-ef33-4675-9710-6b96b68b0b01"),
                            Category = "Pizza",
                            Name = "Barbecue Chicken",
                            Price = 10,
                            Subtitle = "Tangy, rich, our homemade BBQ Chicken pizza",
                            TitleImagePath = "~/images/pizza_img4.jpg"
                        },
                        new
                        {
                            Id = new Guid("24e05ddd-1db5-49ef-80e3-9fc097245aee"),
                            Category = "Pizza",
                            Name = "Egg-ceptional",
                            Price = 10,
                            Subtitle = "Enjoy breakfast anytime of the day! Our breakfast pizza",
                            TitleImagePath = "~/images/pizza_img4.jpg"
                        },
                        new
                        {
                            Id = new Guid("3a8aaedb-8922-4d42-ba5a-94fe75c095a0"),
                            Category = "Pizza",
                            Name = "lunch Special Pizza",
                            Price = 10,
                            Subtitle = "one-topping pizza and a16 ounce drink Specialties",
                            TitleImagePath = "~/images/pizza_img5.jpg"
                        },
                        new
                        {
                            Id = new Guid("9a79203c-2959-46d5-a9a6-cc22fb76a0bd"),
                            Category = "Pizza",
                            Name = "Buffalo Chicken",
                            Price = 10,
                            Subtitle = "Pizza with Chicken, Hot Sauce, Ranch Dressing",
                            TitleImagePath = "~/images/pizza_img6.jpg"
                        },
                        new
                        {
                            Id = new Guid("b369c934-3e9a-4a88-808e-e821bef805fd"),
                            Category = "Pizza",
                            Name = "Tuscan Roma",
                            Price = 10,
                            Subtitle = "Pizza with Roma Tomatoes, Spinach, Alfredo Sauce",
                            TitleImagePath = "~/images/pizza_img1.jpg"
                        },
                        new
                        {
                            Id = new Guid("6bc3af79-e872-4cd5-b4b3-df9430ccb1f6"),
                            Category = "Pizza",
                            Name = "Mac & Cheese",
                            Price = 10,
                            Subtitle = "Pizza with Macaroni and Cheese",
                            TitleImagePath = "~/images/pizza_img2.jpg"
                        },
                        new
                        {
                            Id = new Guid("be5510ec-15a4-467b-8a4d-126b17919ff3"),
                            Category = "Burgers",
                            Name = "Luger Burger",
                            Price = 10,
                            Subtitle = "Luger Burger features extra thick bacon and more half pound of beef.",
                            TitleImagePath = "~/images/pro_img2.jpg"
                        },
                        new
                        {
                            Id = new Guid("d4137bdb-4069-4942-adc1-3ffb9038c2b0"),
                            Category = "Burgers",
                            Name = "Le Pigeon Burger",
                            Price = 10,
                            Subtitle = "Le Pigeon Burger has smoky flavor enhanced with each topping",
                            TitleImagePath = "~/images/pro_img2.jpg"
                        },
                        new
                        {
                            Id = new Guid("c086e6b0-1706-4600-adef-535280249df2"),
                            Category = "Burgers",
                            Name = "Taco Burger",
                            Price = 12,
                            Subtitle = "Tacos are amazing, no doubt about it; need this amazing combo",
                            TitleImagePath = "~/images/pro_img2.jpg"
                        },
                        new
                        {
                            Id = new Guid("42eec7ef-8a2b-484c-a3f4-3b7b6ddf332e"),
                            Category = "Burgers",
                            Name = "Chicken Burger",
                            Price = 15,
                            Subtitle = "The Chicken Caesar Burger is special because it retains the freshness of chicken",
                            TitleImagePath = "~/images/Burgers.jpg"
                        },
                        new
                        {
                            Id = new Guid("570cefb8-0dec-4483-a555-706263249f77"),
                            Category = "Burgers",
                            Name = "Cheese Burger",
                            Price = 10,
                            Subtitle = "Easily the best burger in all of Germany, this enormous preparation",
                            TitleImagePath = "~/images/Burgers.jpg"
                        },
                        new
                        {
                            Id = new Guid("13843e91-263a-4952-aac0-e808a7a1c17f"),
                            Category = "Burgers",
                            Name = "Chicken Burger",
                            Price = 15,
                            Subtitle = "The Chicken Caesar Burger is special because it retains the freshness of chicken",
                            TitleImagePath = "~/images/Burgers.jpg"
                        },
                        new
                        {
                            Id = new Guid("d89f1774-4e3c-4100-a6f8-f69108f2d177"),
                            Category = "Burgers",
                            Name = "Luger Burger",
                            Price = 10,
                            Subtitle = "Luger Burger features extra thick bacon and more half pound of beef.",
                            TitleImagePath = "~/images/pro_img2.jpg"
                        },
                        new
                        {
                            Id = new Guid("bb6d9fa7-57f6-4718-af62-413064a39180"),
                            Category = "Burgers",
                            Name = "Le Pigeon Burger",
                            Price = 10,
                            Subtitle = "Le Pigeon Burger has smoky flavor enhanced with each topping",
                            TitleImagePath = "~/images/pro_img2.jpg"
                        },
                        new
                        {
                            Id = new Guid("b3337e7e-20c1-49f1-98a3-1e70becd7498"),
                            Category = "Burgers",
                            Name = "Taco Burger",
                            Price = 12,
                            Subtitle = "Tacos are amazing, no doubt about it; need this amazing combo",
                            TitleImagePath = "~/images/pro_img2.jpg"
                        },
                        new
                        {
                            Id = new Guid("f2ef8b70-5088-4d69-94c5-fc852ebbdd93"),
                            Category = "Salads",
                            Name = "Cobb salad",
                            Price = 10,
                            Subtitle = "The only way to make this dish heavier is to add bricks",
                            TitleImagePath = "~/images/pro_img3.jpg"
                        },
                        new
                        {
                            Id = new Guid("2ec72acb-a02a-4969-87e2-420d51a30f68"),
                            Category = "Salads",
                            Name = "Larb",
                            Price = 10,
                            Subtitle = "It's usually served with raw vegetables and sticky rice. vegetables",
                            TitleImagePath = "~/images/pro_img3.jpg"
                        },
                        new
                        {
                            Id = new Guid("1bc80b7b-5d29-4531-832d-d8d7d53713d8"),
                            Category = "Salads",
                            Name = "Cobb salad",
                            Price = 10,
                            Subtitle = "The only way to make this dish heavier is to add bricks",
                            TitleImagePath = "~/images/pro_img3.jpg"
                        },
                        new
                        {
                            Id = new Guid("f78fd1e7-aa31-4675-a3c0-d7c7e85f3fc6"),
                            Category = "Salads",
                            Name = "Waldorf salad",
                            Price = 10,
                            Subtitle = "Unlike the many folk salads featured here, Waldorf salad",
                            TitleImagePath = "~/images/pro_img3.jpg"
                        },
                        new
                        {
                            Id = new Guid("bfa9d23e-42de-4110-bcb5-b038e40c375c"),
                            Category = "Salads",
                            Name = "Gado-gado",
                            Price = 10,
                            Subtitle = "Gado-gado literally means \"mix - mix.\" It's an Indonesian",
                            TitleImagePath = "~/images/Salad.jpg"
                        },
                        new
                        {
                            Id = new Guid("2f76b39f-90e5-4c4f-b612-45a3dd57c329"),
                            Category = "Salads",
                            Name = "Larb",
                            Price = 10,
                            Subtitle = "It's usually served with raw vegetables and sticky rice. vegetables",
                            TitleImagePath = "~/images/pro_img3.jpg"
                        },
                        new
                        {
                            Id = new Guid("7b96e3e8-7acb-4f79-926e-adbd1cf2fef7"),
                            Category = "Salads",
                            Name = "Cobb salad",
                            Price = 10,
                            Subtitle = "The only way to make this dish heavier is to add bricks.",
                            TitleImagePath = "~/images/pro_img3.jpg"
                        },
                        new
                        {
                            Id = new Guid("c6e0510d-2c5e-47d8-8cb7-bd29d1345cfb"),
                            Category = "Salads",
                            Name = "Gado-gado",
                            Price = 10,
                            Subtitle = "Gado-gado literally means \"mix - mix.\" It's an Indonesian",
                            TitleImagePath = "~/images/Salad.jpg"
                        },
                        new
                        {
                            Id = new Guid("bcfae75f-619b-4cec-b3f9-1a6b686f26f2"),
                            Category = "Salads",
                            Name = "Larb",
                            Price = 10,
                            Subtitle = "It's usually served with raw vegetables and sticky rice. vegetables",
                            TitleImagePath = "~/images/pro_img3.jpg"
                        },
                        new
                        {
                            Id = new Guid("dc608f6f-7e1b-4c2f-9f5c-446b70600331"),
                            Category = "Fries",
                            Name = "Potato Wedges",
                            Price = 10,
                            Subtitle = "Potato wedges sit at the very bottom of the french fry totem pole",
                            TitleImagePath = "~/images/pro_img4.jpg"
                        },
                        new
                        {
                            Id = new Guid("0c858d44-06e9-4a6c-9a70-a64f89f5e231"),
                            Category = "Fries",
                            Name = "Waffle Fries",
                            Price = 10,
                            Subtitle = "Waffle fries have the exact opposite problem of the potato wedges",
                            TitleImagePath = "~/images/Fries.jpg"
                        },
                        new
                        {
                            Id = new Guid("72b95154-2d81-43a9-a2c8-86a66df66024"),
                            Category = "Fries",
                            Name = "Sweet Potato Fries",
                            Price = 10,
                            Subtitle = "We don't hate sweet potato fries, but we certainly don't love them",
                            TitleImagePath = "~/images/pro_img4.jpg"
                        },
                        new
                        {
                            Id = new Guid("4eb65b0e-1a84-4db1-8f05-ccda9daa3577"),
                            Category = "Fries",
                            Name = "Crinkle Cut Fries",
                            Price = 10,
                            Subtitle = "Crinkle cut fries just look like a good time. They're thick and heavy",
                            TitleImagePath = "~/images/pro_img4.jpg"
                        },
                        new
                        {
                            Id = new Guid("4811288f-5c29-424c-868c-e4f333a14c63"),
                            Category = "Fries",
                            Name = "Steak Fries",
                            Price = 10,
                            Subtitle = "Steak fries might seem like the less fun-looking version of crinkle cut fries",
                            TitleImagePath = "~/images/pro_img4.jpg"
                        },
                        new
                        {
                            Id = new Guid("3d43dd0e-c387-4c91-8fe8-7f9872925a5d"),
                            Category = "Fries",
                            Name = "Standard Fries",
                            Price = 10,
                            Subtitle = "Ah, the standard fry—the one that started it all. Despite the fact",
                            TitleImagePath = "~/images/pro_img4.jpg"
                        },
                        new
                        {
                            Id = new Guid("4c7b45a8-2b0f-45f2-8b3e-dccb8379a6a3"),
                            Category = "Fries",
                            Name = "Belgian Fries",
                            Price = 10,
                            Subtitle = "Belgian fries might look like the typical fry experience, but they most",
                            TitleImagePath = "~/images/pro_img4.jpg"
                        },
                        new
                        {
                            Id = new Guid("952e2e9c-5540-4a87-bdff-c9593227c156"),
                            Category = "Fries",
                            Name = "Shoestring Fries",
                            Price = 10,
                            Subtitle = "Despite the fact that shoestring fries aren't quite as crunchy",
                            TitleImagePath = "~/images/pro_img4.jpg"
                        },
                        new
                        {
                            Id = new Guid("0c254aa1-1d35-44cc-b10e-b77c43096cb0"),
                            Category = "Fries",
                            Name = "Curly Fries",
                            Price = 10,
                            Subtitle = "There's something so satisfying about curly fries. First of all",
                            TitleImagePath = "~/images/pro_img4.jpg"
                        },
                        new
                        {
                            Id = new Guid("32de7371-aff9-47fd-9fbd-cd0a49d9efe9"),
                            Category = "Drinks",
                            Name = "Coca-Cola",
                            Price = 10,
                            Subtitle = "Coca-Cola is the most popular drink in the world",
                            TitleImagePath = "~/images/pro_img5.jpg"
                        },
                        new
                        {
                            Id = new Guid("64e6ab28-6758-4ac2-ade5-9d008abf804b"),
                            Category = "Drinks",
                            Name = "Pepsi",
                            Price = 10,
                            Subtitle = "Pepsi is a cola drink type manufactured by PepsiCo",
                            TitleImagePath = "~/images/pro_img5.jpg"
                        },
                        new
                        {
                            Id = new Guid("740f508f-98e8-45b6-a60f-53b2ab1de083"),
                            Category = "Drinks",
                            Name = "Nestlé S.A",
                            Price = 10,
                            Subtitle = "Nestle is synonymous with instant coffee, bottled water, crunches",
                            TitleImagePath = "~/images/pro_img5.jpg"
                        },
                        new
                        {
                            Id = new Guid("2049c854-038c-48b6-b7cd-01d439bf7ab6"),
                            Category = "Drinks",
                            Name = "Sprite",
                            Price = 10,
                            Subtitle = "Sprite is a colorless, lime-lemon flavored, non-caffeinated soft",
                            TitleImagePath = "~/images/pro_img5.jpg"
                        },
                        new
                        {
                            Id = new Guid("22389f7a-61ac-4b14-8044-ed68221d3ad6"),
                            Category = "Drinks",
                            Name = "Mountain Dew",
                            Price = 10,
                            Subtitle = "This is yet another PepsiCo carbonated soft drink.It comes",
                            TitleImagePath = "~/images/pro_img5.jpg"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
